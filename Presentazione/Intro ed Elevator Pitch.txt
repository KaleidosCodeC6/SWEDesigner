Intro ed Elevator Pitch

Buongiorno, siamo il gruppo KaleidosCode e vi illustreremo la nostra proposta per il capitolato C6 - SWEDesigner di Zucchetti S.p.A.
La richiesta è di fornire un editor di diagrammi UML che generi automaticamente il relativo codice sorgente nei linguaggi Java e Javascript. La necessità di un software di questo tipo deriva dal fatto che spesso la relazione tra i diagrammi disegnati in fase di progettazione e il codice che viene poi prodotto in fase di realizzazione è molto debole: il diagramma rischia di essere usato per la prima stesura del codice e poi "dimenticato" senza rimanere al passo con tutte le modifiche a cui sarà sottoposto il sorgente nel tempo. 
Generare automaticamente il codice a partire dai diagrammi garantirebbe invece un accoppiamento molto forte tra la "vista" grafica dell'UML e quella testuale del sorgente.
La traduzione diretta da UML a codice sorgente non è però sempre possibile, o meglio non è possibile un programma che gestisca automaticamente la traduzione di un codice generico. La nostra soluzione si concentrerà quindi su un dominio specifico: quello della creazione di giochi da tavolo. Quello che proponiamo è un editor strutturato a livelli: dal più generico diagramma dei package il nostro software permetterà di progettare via via aumentando di dettaglio il diagramma delle classi contenute in ciascun package, il diagramma delle attività di ciascuna operazione prevista ed infine, per coprire l'ultimo passo tra UML e codice sorgente, una variazione del diagramma di flusso che d'ora in poi chiameremo "Bubble Flowchart". Ciò che lo caratterizza sono le sue unità di base: ciascun elemento sarà infatti una "bolla" di codice già da noi predisposto, di cui sarà possibile impostare i parametri di base ma di cui avremo già progettato la traduzione in codice sorgente. Ovviamente sarà nostro onere fornire una "libreria" di bubble sufficiente a coprire in modo soddisfacente il dominio da noi scelto. Un lato fortemente positivo della soluzione da noi proposta è l'estensibilità: per estendere il nostro software sarà sufficiente estendere la libreria di bubble e coprire quindi differenti ambiti.
Per quanto riguarda le tecnologie da utilizzare, per massimizzare la compatibilità del software è richiesto l'utilizzo di tecnologie web. In particolare, lato server è richiesto l'uso di Java con server Tomcat o Javascript con Node.Js mentre lato client è richiesta la compatibilità con i browser che supportano la triade HTML5 - CSS - Javascript. 
Di questo progetto ci piace la possibilità di metterci in gioco per ricercare una soluzione ad un problema attuale. Inoltre, il dominio tecnologico è largamente adottato nel mondo del lavoro e perciò molto richiesto: riteniamo ampiamente formativo "sporcarci le mani" e imparare a padroneggiarlo. La sua diffusione è tale da permetterci di trovare una gran quantità di codice open source già scritto, e aprirci quindi ampie possibilità di riuso del codice.
Abbiamo anche individuato due criticità centrali, che siamo però convinti di riuscire a gestire: nessuno dei componenti del gruppo ha già esperienza riguardo allo stack tecnologico adottato, e il problema che esaminiamo può rivelarsi estremamente complesso. Siamo pronti a minimizzare i rischi attraverso una precisa formazione personale e una attenta analisi del nostro dominio di applicazione.