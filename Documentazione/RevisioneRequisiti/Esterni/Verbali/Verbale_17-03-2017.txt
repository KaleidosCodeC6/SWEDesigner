KaleidosCode: Vorremmo chiarimenti sul focus principale del progetto. Non siamo sicuri se dobbiamo realizzare un software incentrato sullo sviluppo java/javascript mediante il diagramma UML o un editor UML che in più produce codice. In alcuni casi infatti dobbiamo scegliere se essere fedeli ai vincoli che UML impone o se "valicarli" per un maggior livello di completezza del codice.
Zucchetti: La cosa che vogliamo controllare è la generazione del codice e per fare ciò può essere necessario modificare leggermente il diagramma UML. 
Ad esempio mettiamo caso che voi vogliate utilizzare un editor esterno per la generazione dei diagrammi, come ad esempio ArgoUML, che mi salva l'xmi, poi leggendo l'xmi voi generate il codice. Potrebbe andare benissimo così, ma c'è un problema. Se dovete inventare un diagramma nuovo non c'è lì dentro e allora bisogna capire come risolvere la situazione.
Avete quindi due opzioni: la prima è usare un disegnatore UML standard e richiedere che venga usato sotto certe condizioni. Allora quello che dovete fare in questo caso è controllare che venga usato secondo le vostre direttive e semmai segnalare un eventuale errore. Quindi potete mettere le restrizioni che volete all'UML a patto che il vostro controllore le riconosca e gestica correttamente. Se invece intendete fare voi stessi il disegnatore avete più libertà sotto questo punto di vista.
Voi come pensavate di fare?
KC: Per ora non ci siamo addentrati ancora nella progettazione, ma come idea di massima pensavamo di fare il disegnatore. Vogliamo organizzarlo a livelli: il livello più esterno è un diagramma dei package. Clickando sui singoli elementi si passa a un diagramma delle classi, poi a una visualizzazione più dettagliata di una singola classe. Qui ogni metodo avrà associato il corrispondente diagramma delle attività. All'interno del diagramma delle attività pensavamo di specificare ulteriormente ogni attività con una sorta di diagramma di flusso modificato ad hoc. L'idea è quella di mettere a disposizione una serie di "bubble" organizzate in opportune librerie. Le bubble sono le unità di base del diagramma di flusso e sono già tradotte in codice. In questo modo combinandole tra loro il codice che viene generato dovrebbe verosimilmente essere privo di "buchi". Quindi bloccando un dominio che poteva essere come da capitolato quello dei giochi pensavamo di mettere a disposizione un insieme completo di bolle per essere in grado di garantire che utilizzando quelle bolle possiamo tradurre il diagramma in codice senza errori. Nel caso si volesse estendere mettiamo una bolla "personalizzabile" in cui l'utente deve inserire il proprio pezzo di codice, ma in questo caso viene notificato che la generazione di codice è meno "sicura".
Z: Va bene. A questo proposito, quello che stanno trovando anche gli altri gruppi è che visto il dominio relativamente ristretto sono presenti molti Pattern. Hanno pensato quindi di utilizzare il diagramma dei Pattern già presente in UML. Provate a considerare l'idea, magari potrebbe integrarsi bene con quello che avete già pensato. Tenete conto però che aggiungendo anche il diagramma dei Pattern il vostro disegno potrebbe diventare un po' farraginoso e difficile da leggere se fate tante classi che magari usano tanti pattern.
KC: Ma in che modo dobbiamo utilizzare questi Pattern nel momento di passare a codice?
Z: Quando si sta in un dominio così formato si vengono a creare delle soluzioni. Queste soluzioni alle volte si riescono a riciclare come ereditarietà, alle volte come altro, fatto sta che alle volte saltan fuori i pattern che sono l'unione di più pezzi che collaborano tra loro. Soprattutto c'è anche un altro aspetto: una stessa classe può partecipare a più pattern. Quindi la cosa interessante è che una stessa classe può "giocare in più ruoli". In ogni caso è solo una possibilità che vi presento, se volete seguirla bene, altrimenti va bene lo stesso.
KC: Potremmo pensare di implementare questa idea magari con un sistema di etichette, magari colorate, per dare un'idea di questi pattern.
In ogni caso volevamo un feedback per capire se stiamo andando verso la giusta direzione o se magari stiamo prendendo un abbaglio su qualcosa.
Una discussione che era nata tra di noi riguardava il fatto che trattandosi di UML magari il professor Vardanega tende ad essere più rigido, mentre da quanto abbiamo capito dal primo incontro è apprezzata un po' di "irriverenza" nei confronti dell'UML. 
Z: È giusto. Il discorso è che se voi modificate l'UML con "arroganza", ovvero senza motivare la vostra scelta allora il professor Vardanega avrebbe tutti i motivi di contestarvi. Se vi inventate qualcosa di nuovo deve essere fortemente giustificato e deve avere una logica alla base. In quel caso sono sicuro che anche per lui non ci siano problemi. Comunque ricordatevi che non dovete essere "cattivi" con lo standard. Dovete semplicemente utilizzarlo come vi fa comodo.
KC:Dobbiamo occuparci anche di codice multithread?
Z: No, senza dubbio no. C'è già tanto da dire così, l'importante è che sia chiaro fin dall'inizio. In ogni caso non lo richiedo assolutamente.
KC: Un altro aspetto del quale non siamo sicuri riguarda l'aggiornamento del diagramma in seguito a modifiche al codice precedentemente generato.
Z: No no no, non provate a farlo. Cioè se ci riuscite bene, ma guardate che è difficilissimo.
KC: Il dubbio ci è venuto perchè nel capitolato viene richiesto un aggiornamento del diagramma in seguito a "piccole modifiche al codice".
Z: Si, ma visto che voi avete parlato di bolle nel caso in cui per esempio innestiate delle bolle l'una dentro l'altra la complessità di controllo diventa molto proibitiva, perchè diventa difficile per un "controllore" capire, ad esempio se innestate una bolla if dentro un'altro if, a quale if ci si riferisce, e così via.
KC: L'idea più che altro derivava dal fatto che nel momento di aggiungere un elemento al diagramma pensavamo di creare un oggetto nascosto che contenesse le informazioni necessarie a popolare sia il diagramma stesso che il codice. Da qui l'idea, magari mediante colorazioni diverse, di rendere possibili piccole modifiche.
Z: Allora dovete essere più liberali sulle bolle. Se invece volete essere più rigidi su quelle dovete rinunciare a questo aspetto.
KC: Un'ultima domanda. Se decidiamo i dare la possibilità all'utente di salvare i propri personali design pattern potremmo considerare di gestirlo tramite coockies o saremmo costretti ad adottare altre soluzioni come ad esempio un salvataggio in remoto?
Z: Sarebbe proibitivo. Un pattern avrebbe senza dubbio dimensioni troppo grandi per un cookie. Poi dipende dal formato che usate, ma è difficile che ci stia. In più non sono sicuro che abbia senso che sia un cookie, local storage è molto meglio. Il cookie inoltre genera molto traffico perchè viene passato ogni volta che viene contattato il server.
KC: Va bene. Grazie della disponibilità.
Z: Bene, fatemi sapere se avete ulteriori dubbi.